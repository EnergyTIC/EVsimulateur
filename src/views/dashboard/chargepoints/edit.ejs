<% layout('../../layouts/main') -%> <% block('title', 'Edit Charepoint' ) -%> <%
script(`https://cdn.jsdelivr.net/npm/vue${process.env.NODE_ENV === 'production'
? '@2.6.11' : '/dist/vue.js'}`) -%> <%
script('https://cdn.jsdelivr.net/npm/axios@0.20.0/dist/axios.min.js') -%> <%
script('https://cdn.jsdelivr.net/npm/lodash@4.17.20/lodash.min.js') -%> <%
script('https://unpkg.com/vue-toasted') -%>
<h1>Edit Chargepoint</h1>

<form class="my-4" id="edit-form" @submit.prevent="submit">
  <div v-if="errorMsg" class="alert alert-danger my-2" role="alert">
    {{ errorMsg }}
  </div>
  <fieldset>
    <legend>Basic Information</legend>

    <div class="row">
      <div class="col">
        <div class="form-group">
          <label for="cpid">Chargepoint ID</label>
          <input
            type="text"
            class="form-control"
            id="cpid"
            disabled
            v-model="cp.id"
          />
        </div>
      </div>
      <div class="col">
        <div class="form-group">
          <label for="cpid">Serial no</label>
          <input
            type="text"
            class="form-control"
            id="serialnum"
            v-model="cp.serial"
          />
        </div>
      </div>
    </div>

    <div class="form-group">
      <label for="name">Name</label>
      <input type="text" class="form-control" id="name" v-model="cp.name" />
    </div>

    <div class="row">
      <div class="col">
        <div class="form-group">
          <label for="vendor">Vendor*</label>
          <input
            type="text"
            class="form-control"
            id="vendor"
            v-model="cp.vendor"
          />
        </div>
      </div>
      <div class="col">
        <div class="form-group">
          <label for="model">Model*</label>
          <input
            type="text"
            class="form-control"
            id="model"
            v-model="cp.model"
          />
        </div>
      </div>
    </div>
    <div class="form-group">
      <label for="firmware-version">Firmware version</label>
      <input
        type="text"
        class="form-control"
        id="firmware-version"
        v-model="cp.firmware_version"
      />
    </div>
  </fieldset>

  <fieldset>
    <legend>OCPP config</legend>

    <div class="row">
      <div class="col">
        <div class="form-group">
          <label for="ocpp-version">OCPP version*</label>
          <select class="form-control" id="ocpp-version" v-model="cp.ocpp_v">
            <option value="ocpp1.6j">1.6 JSON</option>
          </select>
        </div>
      </div>
      <div class="col">
        <div class="form-group">
          <label for="meterValFreq">Meter value frequency (minutes)</label>
          <input
            type="number"
            min="1"
            class="form-control"
            id="meterValFreq"
            v-model.number="cp.meter_value_frequency"
          />
        </div>
      </div>
    </div>

    <fieldset>
      <legend>Connectors</legend>

      <table class="table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Label*</th>
            <th>DC/AC*</th>
            <th>Lock while charging?*</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(connector, i) in connectors" :key="i + 1">
            <td>{{ i + 1 }}</td>
            <td>
              <select class="form-control" v-model="connector.type">
                <option value="">-SELECT-</option>
                <option value="ccs">CCS</option>
                <option value="chademo">ChaDeMo</option>
                <option value="level2">Level 2</option>
              </select>
            </td>
            <td>
              <div>
                <label>
                  <input type="radio" value="dc" v-model="connector.dcac" />
                  DC
                </label>
              </div>
              <div>
                <label>
                  <input type="radio" value="ac" v-model="connector.dcac" />
                  AC
                </label>
              </div>
            </td>
            <td>
              <input
                type="checkbox"
                name="locked"
                v-model="connector.auto_lock"
              />
            </td>
            <td>
              <button
                type="buttom"
                class="btn btn-outline-danger"
                @click="connectors.splice(i,1)"
                :disabled="connectors.length < 2"
              >
                &times;
              </button>
            </td>
          </tr>
        </tbody>
      </table>
      <div class="d-flex justify-content-end">
        <button
          type="button"
          class="btn btn-outline-secondary"
          @click="newConnector"
        >
          + Add new
        </button>
      </div>
    </fieldset>

    <div class="form-group">
      <label>Central system location*</label>

      <input
        type="url"
        class="form-control"
        v-model="cp.csmsUrl"
        placeholder="ws://"
      />

      <!-- <div class="row">
        <div class="col-sm-2">
          <label for="protocol">Protocol</label>
          <select
            class="form-control"
            id="protocol"
            v-model="cp.cs_location.protocol"
          >
            <option value="ws://">ws://</option>
            <option value="wss://">wss://</option>
            <option value="http://">http://</option>
            <option value="https://">https://</option>
          </select>
        </div>
        <div class="col-sm-8">
          <div class="form-group">
            <label for="hostname">Hostname</label>
            <input
              type="text"
              class="form-control"
              id="hostname"
              v-model="cp.cs_location.hostname"
            />
          </div>
        </div>
        <div class="col-sm-2">
          <div class="form-group">
            <label for="port">Port</label>
            <input
              type="number"
              min="1"
              class="form-control"
              id="port"
              v-model="cp.cs_location.port"
            />
          </div>
        </div>
      </div> -->
    </div>
  </fieldset>

  <div class="d-flex justify-content-center">
    <button class="btn btn-primary">Save</button>
  </div>
</form>

<script>
  Vue.use(Toasted, {
    position: 'top-center',
  });
  const connector = () => ({
    type: '',
    dcac: 'ac',
    auto_lock: true,
    status: null,
  });
  const app = new Vue({
    el: '#edit-form',
    data: {
      cp: {
        id: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).id,
        serial: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).serial,
        name: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).name,
        vendor: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).vendor,
        model: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).model,
        firmware_version: JSON.parse(`<%-JSON.stringify(chargepoint)%>`)
          .firmware_version,
        ocpp_v: JSON.parse(`<%-JSON.stringify(chargepoint)%>`).ocpp_v,
        meter_value_frequency: JSON.parse(`<%-JSON.stringify(chargepoint)%>`)
          .meter_value_frequency,
        // cs_location: {
        //   protocol: '',
        //   hostname: '',
        //   port: '',
        // },
        csmsUrl: '',
      },
      connectors: JSON.parse(`<%-JSON.stringify(connectors)%>`),
      errorMsg: '',
      editing: false,
    },
    computed: {
      csmsEndpoint: function () {
        return `${this.cp.cs_location.protocol}${this.cp.cs_location.hostname}:${this.cp.cs_location.port}`;
      },
    },
    mounted() {
      this.set_csms_protocol_hostname(
        JSON.parse(`<%-JSON.stringify(chargepoint)%>`).csms_endpoint,
      );
    },
    methods: {
      set_csms_protocol_hostname(url) {
        // const urlObj = new URL(url);
        // this.cp.cs_location.protocol = `${urlObj.protocol}//`;
        // this.cp.cs_location.hostname = urlObj.hostname;
        // this.cp.cs_location.port = urlObj.port;

        this.cp.csmsUrl = url;
      },
      async submit() {
        this.editing = true;
        try {
          this.errorMsg = '';
          //Reassigning ids
          const formattedConnectors = _.map(this.connectors, (conn, c) => {
            conn.id = c + 1;
            conn.auto_lock = conn.auto_lock ? 1 : 0;
            return conn;
          });

          await axios.post(
            `/dashboard/chargepoints/edit/${
              JSON.parse(`<%-JSON.stringify(chargepoint)%>`).id
            }`,
            {
              ...this.cp,
              cs_location: this.cp.csmsUrl,
              editedConnectors: formattedConnectors,
            },
          );
          this.$toasted.success('Fields updated').goAway(1800);
        } catch (error) {
          const msg = _.get(
            error,
            'response.data.message',
            'Unable to Edit Charger',
          );
          this.errorMsg = msg;
        }
        this.editing = false;
      },
      newConnector: function () {
        this.connectors.push(connector());
      },
    },
  });
</script>
